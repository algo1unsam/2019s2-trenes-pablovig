import trenes.*

describe "test trenes"{
	
	var vagonPas1 = new VagonPasajeros(ancho = 2, largo = 3)
	var vagonPas2 = new VagonPasajeros(ancho = 3, largo = 10)
	var vagonCar = new VagonCarga(cargaMax = 20000)
	var formacion1 = new Formacion()
	var formacion2 = new Formacion()
	var locom1 = new Locomotora(velocidadMax = 50, peso = 1000,pesoArrastre = 5000)
	var locom2 = new Locomotora()
	
	fixture{
		
		formacion1.agregarVagon(vagonPas1)
	    formacion1.agregarVagon(vagonPas2)
	    formacion1.agregarVagon(vagonCar)
		formacion1.agregarLocomotora(locom1)
	    formacion1.agregarLocomotora(locom2)
	}

test "Punto1"{

	
	
	
	
	assert.equals(1,formacion1.cuantosVagonesLivianos())
	
}

test "Punto2"{
	
	locom1.velocidadMax(50)
	locom2.velocidadMax(70)
	

	
	assert.equals(50,formacion1.velocidadMax())
}

test "Punto3"{
	
	
	locom2.pesoArrastre(888888888)
	
		
	assert.notThat(formacion1.esEficiente())
}

test "Punto4"{
	
	locom1.peso(1000)
	locom1.pesoArrastre(8000)
	
	locom2.peso(1200)
	locom2.pesoArrastre(9000)
	
	formacion1.agregarVagon(vagonPas1)
	formacion1.agregarVagon(vagonPas2)
	
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	
	assert.notThat(formacion1.puedeMoverse())
}

test "Punto5"{
	
	locom1.peso(1000)
	locom1.pesoArrastre(5000)
	
	locom2.peso(1200)
	locom2.pesoArrastre(4500)
	
	formacion1.agregarVagon(vagonPas1)
	formacion1.agregarVagon(vagonPas2)
	
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	
	assert.equals(25400,formacion1.faltaEmpuje())
}

test "Punto6"{

	formacion2.agregarVagon(vagonPas2)
	
	deposito.formacionEnDeposito(formacion1)
	deposito.formacionEnDeposito(formacion2)
	
	assert.that(deposito.vagonesMasPesados().contains(vagonCar))
	assert.that(deposito.vagonesMasPesados().contains(vagonPas2))
}


test "Punto7"{
	
	locom1.peso(1000)
	locom1.pesoArrastre(5000)
	
	locom2.peso(1200)
	locom2.pesoArrastre(4500)
	
	formacion1.agregarVagon(vagonPas1)
	formacion1.agregarVagon(vagonPas2)
	
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	
	deposito.formacionEnDeposito(formacion1)
	
	assert.that(deposito.NecesitaConductor())
}

test "Punto8"{
	
	locom1.peso(1000)
	locom1.pesoArrastre(5000)
	
	locom2.peso(1200)
	locom2.pesoArrastre(50000)

	
	formacion1.agregarVagon(vagonPas1)
	formacion1.agregarVagon(vagonPas2)
	
	formacion1.agregarLocomotora(locom1)
	
	deposito.locomotoraSuelta(locom2)
	deposito.agregarAFormacion(formacion1)
	
	assert.that(formacion1.contieneLocomotora(locom2))
}
	
}
