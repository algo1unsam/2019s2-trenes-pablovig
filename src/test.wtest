import trenes.*

describe "test trenes"{
	
	var vagonPas1
	var vagonPas2
	var vagonCar
	var tipoVagon1
	var tipoVagon2
	var formacion1
	var formacion2
	var locom1
	var locom2
	
	fixture{
		
		vagonPas1 = new VagonPasajeros()
		vagonPas2 = new VagonPasajeros()
		vagonCar = new VagonCarga()
		tipoVagon1 = new AnchoUtilMin()
		tipoVagon2 = new AnchoUtilMin()
		formacion1 = new Formacion()
		formacion2 = new Formacion()
		locom1 = new Locomotora()
		locom2 = new Locomotora()
		
	}

test "Punto1"{
	
	
	tipoVagon1.largo(3)
	vagonPas1.cantPasajeros(tipoVagon1)
	
	tipoVagon2.largo(2)
	vagonPas2.cantPasajeros(tipoVagon2)
	
	formacion1.agregarVagon(vagonPas1)
	formacion1.agregarVagon(vagonPas2)
	
	
	assert.equals(2,formacion1.cuantosVagonesLivianos())
	
}

test "Punto2"{
	
	locom1.velocidadMax(50)
	locom2.velocidadMax(70)
	
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	
	assert.equals(50,formacion1.velocidadMax())
}

test "Punto3"{
	
	locom1.peso(1000)
	locom1.pesoArrastre(5000)
	
	locom2.peso(1200)
	locom2.pesoArrastre(5000)
	
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	
	assert.notThat(formacion1.esEficiente())
}

test "Punto4"{
	
	locom1.peso(1000)
	locom1.pesoArrastre(8000)
	
	locom2.peso(1200)
	locom2.pesoArrastre(9000)
	
	tipoVagon1.largo(10)
	vagonPas1.cantPasajeros(tipoVagon1)
	
	tipoVagon2.largo(8)
	vagonPas2.cantPasajeros(tipoVagon2)
	
	formacion1.agregarVagon(vagonPas1)
	formacion1.agregarVagon(vagonPas2)
	
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	
	assert.that(formacion1.puedeMoverse())
}

test "Punto5"{
	
	locom1.peso(1000)
	locom1.pesoArrastre(5000)
	
	locom2.peso(1200)
	locom2.pesoArrastre(4500)
	
	tipoVagon1.largo(10)
	vagonPas1.cantPasajeros(tipoVagon1)
	
	tipoVagon2.largo(8)
	vagonPas2.cantPasajeros(tipoVagon2)
	
	formacion1.agregarVagon(vagonPas1)
	formacion1.agregarVagon(vagonPas2)
	
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	
	assert.equals(4220,formacion1.faltaEmpuje())
}

test "Punto7"{
	
	locom1.peso(1000)
	locom1.pesoArrastre(5000)
	
	locom2.peso(1200)
	locom2.pesoArrastre(4500)
	
	tipoVagon1.largo(10)
	vagonPas1.cantPasajeros(tipoVagon1)
	
	tipoVagon2.largo(8)
	vagonPas2.cantPasajeros(tipoVagon2)
	
	formacion1.agregarVagon(vagonPas1)
	formacion1.agregarVagon(vagonPas2)
	
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	
	deposito.formacionEnDeposito(formacion1)
	
	assert.that(deposito.NecesitaConductor())
}

test "Punto8"{
	
	locom1.peso(1000)
	locom1.pesoArrastre(5000)
	
	locom2.peso(1200)
	locom2.pesoArrastre(12000)
	
	tipoVagon1.largo(10)
	vagonPas1.cantPasajeros(tipoVagon1)
	
	tipoVagon2.largo(8)
	vagonPas2.cantPasajeros(tipoVagon2)
	
	formacion1.agregarVagon(vagonPas1)
	formacion1.agregarVagon(vagonPas2)
	
	formacion1.agregarLocomotora(locom1)
	
	deposito.formacionSuelta(locom2)
	deposito.agregarAFormacion(0)
	deposito.formacionEnDeposito(formacion1)
	
	assert.that()
}
	
}
